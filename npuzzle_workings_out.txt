lstate = board position, the number of moves made to reach the board position, and the previous state

public class Board {
  Board(int[][] tiles)        // construct a board from an N-by-N array of tiles
  int hamming()               // return number of blocks out of place
  int manhattan()             // return sum of Manhattan distances between blocks and goal
  boolean equals(Object y)    // does this board position equal y
  Iterable<Board> neighbors() // return an Iterable of all neighboring board positions
  String toString()           // return a string representation of the board
}

public class Solver {
  Solver(Board initial)        // find a solution to the initial board
  boolean isSolvable()         // is the initial board solvable?
  int moves()                  // return min number of moves to solve initial board; -1 if no solution
  Iterable<Board> solution()   // return an Iterable of board positions in solution
}

var PriorityQueue = require('priorityqueuejs');
 
var queue = new PriorityQueue(function(a, b) {
	console.log(a);
  return a.cash - b.cash;
});
 
queue.enq({ cash: 250, name: 'Valentina' });
queue.enq({ cash: 300, name: 'Jano' });
queue.enq({ cash: 150, name: 'Fran' });
queue.size(); // 3 
queue.peek(); // { cash: 300, name: 'Jano' } 
queue.deq();  // { cash: 300, name: 'Jano' } 
queue.size(); // 2 

check if goal


